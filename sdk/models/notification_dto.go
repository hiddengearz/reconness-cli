// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NotificationDto notification dto
//
// swagger:model NotificationDto
type NotificationDto struct {

	// directory payload
	DirectoryPayload *string `json:"directoryPayload,omitempty"`

	// has Http open payload
	HasHTTPOpenPayload *string `json:"hasHttpOpenPayload,omitempty"`

	// ip address payload
	IPAddressPayload *string `json:"ipAddressPayload,omitempty"`

	// is alive payload
	IsAlivePayload *string `json:"isAlivePayload,omitempty"`

	// method
	Method *string `json:"method,omitempty"`

	// note payload
	NotePayload *string `json:"notePayload,omitempty"`

	// payload
	Payload *string `json:"payload,omitempty"`

	// root domain payload
	RootDomainPayload *string `json:"rootDomainPayload,omitempty"`

	// screenshot payload
	ScreenshotPayload *string `json:"screenshotPayload,omitempty"`

	// service payload
	ServicePayload *string `json:"servicePayload,omitempty"`

	// subdomain payload
	SubdomainPayload *string `json:"subdomainPayload,omitempty"`

	// takeover payload
	TakeoverPayload *string `json:"takeoverPayload,omitempty"`

	// technology payload
	TechnologyPayload *string `json:"technologyPayload,omitempty"`

	// url
	URL *string `json:"url,omitempty"`
}

// Validate validates this notification dto
func (m *NotificationDto) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this notification dto based on context it is used
func (m *NotificationDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NotificationDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NotificationDto) UnmarshalBinary(b []byte) error {
	var res NotificationDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
