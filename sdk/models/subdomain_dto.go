// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubdomainDto subdomain dto
//
// swagger:model SubdomainDto
type SubdomainDto struct {

	// agents ran before
	AgentsRanBefore *string `json:"agentsRanBefore,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// directories
	Directories []*DirectoryDto `json:"directories"`

	// has Http open
	HasHTTPOpen *bool `json:"hasHttpOpen,omitempty"`

	// id
	// Format: uuid
	ID *strfmt.UUID `json:"id,omitempty"`

	// ip address
	IPAddress *string `json:"ipAddress,omitempty"`

	// is alive
	IsAlive *bool `json:"isAlive,omitempty"`

	// is main portal
	IsMainPortal *bool `json:"isMainPortal,omitempty"`

	// labels
	Labels []*LabelDto `json:"labels"`

	// name
	Name *string `json:"name,omitempty"`

	// notes
	Notes *string `json:"notes,omitempty"`

	// root domain
	RootDomain *string `json:"rootDomain,omitempty"`

	// screenshot Http p n g base64
	ScreenshotHTTPPNGBase64 *string `json:"screenshotHttpPNGBase64,omitempty"`

	// screenshot Https p n g base64
	ScreenshotHTTPSPNGBase64 *string `json:"screenshotHttpsPNGBase64,omitempty"`

	// services
	Services []*ServiceDto `json:"services"`

	// takeover
	Takeover *bool `json:"takeover,omitempty"`

	// target
	Target *string `json:"target,omitempty"`

	// technology
	Technology *string `json:"technology,omitempty"`
}

// Validate validates this subdomain dto
func (m *SubdomainDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirectories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubdomainDto) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SubdomainDto) validateDirectories(formats strfmt.Registry) error {
	if swag.IsZero(m.Directories) { // not required
		return nil
	}

	for i := 0; i < len(m.Directories); i++ {
		if swag.IsZero(m.Directories[i]) { // not required
			continue
		}

		if m.Directories[i] != nil {
			if err := m.Directories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("directories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SubdomainDto) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SubdomainDto) validateLabels(formats strfmt.Registry) error {
	if swag.IsZero(m.Labels) { // not required
		return nil
	}

	for i := 0; i < len(m.Labels); i++ {
		if swag.IsZero(m.Labels[i]) { // not required
			continue
		}

		if m.Labels[i] != nil {
			if err := m.Labels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SubdomainDto) validateServices(formats strfmt.Registry) error {
	if swag.IsZero(m.Services) { // not required
		return nil
	}

	for i := 0; i < len(m.Services); i++ {
		if swag.IsZero(m.Services[i]) { // not required
			continue
		}

		if m.Services[i] != nil {
			if err := m.Services[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this subdomain dto based on the context it is used
func (m *SubdomainDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDirectories(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubdomainDto) contextValidateDirectories(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Directories); i++ {

		if m.Directories[i] != nil {
			if err := m.Directories[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("directories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SubdomainDto) contextValidateLabels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Labels); i++ {

		if m.Labels[i] != nil {
			if err := m.Labels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SubdomainDto) contextValidateServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Services); i++ {

		if m.Services[i] != nil {
			if err := m.Services[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubdomainDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubdomainDto) UnmarshalBinary(b []byte) error {
	var res SubdomainDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
