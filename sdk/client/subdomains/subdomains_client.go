// Code generated by go-swagger; DO NOT EDIT.

package subdomains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new subdomains API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for subdomains API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPISubdomainsID(params *DeleteAPISubdomainsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAPISubdomainsIDOK, error)

	GetAPISubdomainsGetPaginateTargetNameRootDomainName(params *GetAPISubdomainsGetPaginateTargetNameRootDomainNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPISubdomainsGetPaginateTargetNameRootDomainNameOK, error)

	GetAPISubdomainsTargetNameRootDomainNameSubdomainName(params *GetAPISubdomainsTargetNameRootDomainNameSubdomainNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPISubdomainsTargetNameRootDomainNameSubdomainNameOK, error)

	PostAPISubdomains(params *PostAPISubdomainsParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPISubdomainsOK, error)

	PutAPISubdomainsID(params *PutAPISubdomainsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutAPISubdomainsIDOK, error)

	PutAPISubdomainsLabelID(params *PutAPISubdomainsLabelIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutAPISubdomainsLabelIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAPISubdomainsID delete API subdomains ID API
*/
func (a *Client) DeleteAPISubdomainsID(params *DeleteAPISubdomainsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAPISubdomainsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPISubdomainsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPISubdomainsID",
		Method:             "DELETE",
		PathPattern:        "/api/Subdomains/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPISubdomainsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPISubdomainsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPISubdomainsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPISubdomainsGetPaginateTargetNameRootDomainName get API subdomains get paginate target name root domain name API
*/
func (a *Client) GetAPISubdomainsGetPaginateTargetNameRootDomainName(params *GetAPISubdomainsGetPaginateTargetNameRootDomainNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPISubdomainsGetPaginateTargetNameRootDomainNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPISubdomainsGetPaginateTargetNameRootDomainNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPISubdomainsGetPaginateTargetNameRootDomainName",
		Method:             "GET",
		PathPattern:        "/api/Subdomains/GetPaginate/{targetName}/{rootDomainName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPISubdomainsGetPaginateTargetNameRootDomainNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPISubdomainsGetPaginateTargetNameRootDomainNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPISubdomainsGetPaginateTargetNameRootDomainName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPISubdomainsTargetNameRootDomainNameSubdomainName get API subdomains target name root domain name subdomain name API
*/
func (a *Client) GetAPISubdomainsTargetNameRootDomainNameSubdomainName(params *GetAPISubdomainsTargetNameRootDomainNameSubdomainNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPISubdomainsTargetNameRootDomainNameSubdomainNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPISubdomainsTargetNameRootDomainNameSubdomainNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPISubdomainsTargetNameRootDomainNameSubdomainName",
		Method:             "GET",
		PathPattern:        "/api/Subdomains/{targetName}/{rootDomainName}/{subdomainName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPISubdomainsTargetNameRootDomainNameSubdomainNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPISubdomainsTargetNameRootDomainNameSubdomainNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPISubdomainsTargetNameRootDomainNameSubdomainName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPISubdomains post API subdomains API
*/
func (a *Client) PostAPISubdomains(params *PostAPISubdomainsParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPISubdomainsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPISubdomainsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPISubdomains",
		Method:             "POST",
		PathPattern:        "/api/Subdomains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPISubdomainsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPISubdomainsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPISubdomains: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPISubdomainsID put API subdomains ID API
*/
func (a *Client) PutAPISubdomainsID(params *PutAPISubdomainsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutAPISubdomainsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPISubdomainsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPISubdomainsID",
		Method:             "PUT",
		PathPattern:        "/api/Subdomains/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAPISubdomainsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPISubdomainsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPISubdomainsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPISubdomainsLabelID put API subdomains label ID API
*/
func (a *Client) PutAPISubdomainsLabelID(params *PutAPISubdomainsLabelIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutAPISubdomainsLabelIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPISubdomainsLabelIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPISubdomainsLabelID",
		Method:             "PUT",
		PathPattern:        "/api/Subdomains/label/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAPISubdomainsLabelIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPISubdomainsLabelIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPISubdomainsLabelID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
