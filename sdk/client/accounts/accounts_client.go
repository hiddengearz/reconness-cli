// Code generated by go-swagger; DO NOT EDIT.

package accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new accounts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for accounts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetAPIAccountsCurrentVersion(params *GetAPIAccountsCurrentVersionParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIAccountsCurrentVersionOK, error)

	GetAPIAccountsLatestVersion(params *GetAPIAccountsLatestVersionParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIAccountsLatestVersionOK, error)

	GetAPIAccountsLogfiles(params *GetAPIAccountsLogfilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIAccountsLogfilesOK, error)

	GetAPIAccountsNotification(params *GetAPIAccountsNotificationParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIAccountsNotificationOK, error)

	GetAPIAccountsReadLogfileLogFileSelected(params *GetAPIAccountsReadLogfileLogFileSelectedParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIAccountsReadLogfileLogFileSelectedOK, error)

	PostAPIAccountsCleanLogfile(params *PostAPIAccountsCleanLogfileParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIAccountsCleanLogfileOK, error)

	PostAPIAccountsSaveNotification(params *PostAPIAccountsSaveNotificationParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIAccountsSaveNotificationOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetAPIAccountsCurrentVersion get API accounts current version API
*/
func (a *Client) GetAPIAccountsCurrentVersion(params *GetAPIAccountsCurrentVersionParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIAccountsCurrentVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIAccountsCurrentVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIAccountsCurrentVersion",
		Method:             "GET",
		PathPattern:        "/api/Accounts/currentVersion",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIAccountsCurrentVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIAccountsCurrentVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIAccountsCurrentVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIAccountsLatestVersion get API accounts latest version API
*/
func (a *Client) GetAPIAccountsLatestVersion(params *GetAPIAccountsLatestVersionParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIAccountsLatestVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIAccountsLatestVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIAccountsLatestVersion",
		Method:             "GET",
		PathPattern:        "/api/Accounts/latestVersion",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIAccountsLatestVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIAccountsLatestVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIAccountsLatestVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIAccountsLogfiles get API accounts logfiles API
*/
func (a *Client) GetAPIAccountsLogfiles(params *GetAPIAccountsLogfilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIAccountsLogfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIAccountsLogfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIAccountsLogfiles",
		Method:             "GET",
		PathPattern:        "/api/Accounts/logfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIAccountsLogfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIAccountsLogfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIAccountsLogfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIAccountsNotification get API accounts notification API
*/
func (a *Client) GetAPIAccountsNotification(params *GetAPIAccountsNotificationParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIAccountsNotificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIAccountsNotificationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIAccountsNotification",
		Method:             "GET",
		PathPattern:        "/api/Accounts/notification",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIAccountsNotificationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIAccountsNotificationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIAccountsNotification: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIAccountsReadLogfileLogFileSelected get API accounts read logfile log file selected API
*/
func (a *Client) GetAPIAccountsReadLogfileLogFileSelected(params *GetAPIAccountsReadLogfileLogFileSelectedParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIAccountsReadLogfileLogFileSelectedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIAccountsReadLogfileLogFileSelectedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIAccountsReadLogfileLogFileSelected",
		Method:             "GET",
		PathPattern:        "/api/Accounts/readLogfile/{logFileSelected}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIAccountsReadLogfileLogFileSelectedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIAccountsReadLogfileLogFileSelectedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIAccountsReadLogfileLogFileSelected: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIAccountsCleanLogfile post API accounts clean logfile API
*/
func (a *Client) PostAPIAccountsCleanLogfile(params *PostAPIAccountsCleanLogfileParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIAccountsCleanLogfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIAccountsCleanLogfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIAccountsCleanLogfile",
		Method:             "POST",
		PathPattern:        "/api/Accounts/cleanLogfile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIAccountsCleanLogfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIAccountsCleanLogfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIAccountsCleanLogfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIAccountsSaveNotification post API accounts save notification API
*/
func (a *Client) PostAPIAccountsSaveNotification(params *PostAPIAccountsSaveNotificationParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIAccountsSaveNotificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIAccountsSaveNotificationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIAccountsSaveNotification",
		Method:             "POST",
		PathPattern:        "/api/Accounts/saveNotification",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIAccountsSaveNotificationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIAccountsSaveNotificationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIAccountsSaveNotification: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
