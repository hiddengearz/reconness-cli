// Code generated by go-swagger; DO NOT EDIT.

package agents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new agents API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for agents API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPIAgentsAgentName(params *DeleteAPIAgentsAgentNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAPIAgentsAgentNameOK, error)

	GetAPIAgents(params *GetAPIAgentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIAgentsOK, error)

	GetAPIAgentsAgentName(params *GetAPIAgentsAgentNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIAgentsAgentNameOK, error)

	GetAPIAgentsMarketplace(params *GetAPIAgentsMarketplaceParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIAgentsMarketplaceOK, error)

	GetAPIAgentsRunningTargetNameRootDomainNameSubdomainName(params *GetAPIAgentsRunningTargetNameRootDomainNameSubdomainNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIAgentsRunningTargetNameRootDomainNameSubdomainNameOK, error)

	PostAPIAgents(params *PostAPIAgentsParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIAgentsOK, error)

	PostAPIAgentsDebug(params *PostAPIAgentsDebugParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIAgentsDebugOK, error)

	PostAPIAgentsInstall(params *PostAPIAgentsInstallParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIAgentsInstallOK, error)

	PostAPIAgentsRun(params *PostAPIAgentsRunParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIAgentsRunOK, error)

	PostAPIAgentsStop(params *PostAPIAgentsStopParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIAgentsStopOK, error)

	PutAPIAgentsID(params *PutAPIAgentsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutAPIAgentsIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAPIAgentsAgentName delete API agents agent name API
*/
func (a *Client) DeleteAPIAgentsAgentName(params *DeleteAPIAgentsAgentNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAPIAgentsAgentNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIAgentsAgentNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIAgentsAgentName",
		Method:             "DELETE",
		PathPattern:        "/api/Agents/{agentName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIAgentsAgentNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIAgentsAgentNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIAgentsAgentName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIAgents get API agents API
*/
func (a *Client) GetAPIAgents(params *GetAPIAgentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIAgentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIAgentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIAgents",
		Method:             "GET",
		PathPattern:        "/api/Agents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIAgentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIAgentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIAgents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIAgentsAgentName get API agents agent name API
*/
func (a *Client) GetAPIAgentsAgentName(params *GetAPIAgentsAgentNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIAgentsAgentNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIAgentsAgentNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIAgentsAgentName",
		Method:             "GET",
		PathPattern:        "/api/Agents/{agentName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIAgentsAgentNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIAgentsAgentNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIAgentsAgentName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIAgentsMarketplace get API agents marketplace API
*/
func (a *Client) GetAPIAgentsMarketplace(params *GetAPIAgentsMarketplaceParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIAgentsMarketplaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIAgentsMarketplaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIAgentsMarketplace",
		Method:             "GET",
		PathPattern:        "/api/Agents/marketplace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIAgentsMarketplaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIAgentsMarketplaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIAgentsMarketplace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIAgentsRunningTargetNameRootDomainNameSubdomainName get API agents running target name root domain name subdomain name API
*/
func (a *Client) GetAPIAgentsRunningTargetNameRootDomainNameSubdomainName(params *GetAPIAgentsRunningTargetNameRootDomainNameSubdomainNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIAgentsRunningTargetNameRootDomainNameSubdomainNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIAgentsRunningTargetNameRootDomainNameSubdomainNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIAgentsRunningTargetNameRootDomainNameSubdomainName",
		Method:             "GET",
		PathPattern:        "/api/Agents/running/{targetName}/{rootDomainName}/{subdomainName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIAgentsRunningTargetNameRootDomainNameSubdomainNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIAgentsRunningTargetNameRootDomainNameSubdomainNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIAgentsRunningTargetNameRootDomainNameSubdomainName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIAgents post API agents API
*/
func (a *Client) PostAPIAgents(params *PostAPIAgentsParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIAgentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIAgentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIAgents",
		Method:             "POST",
		PathPattern:        "/api/Agents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIAgentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIAgentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIAgents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIAgentsDebug post API agents debug API
*/
func (a *Client) PostAPIAgentsDebug(params *PostAPIAgentsDebugParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIAgentsDebugOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIAgentsDebugParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIAgentsDebug",
		Method:             "POST",
		PathPattern:        "/api/Agents/debug",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIAgentsDebugReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIAgentsDebugOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIAgentsDebug: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIAgentsInstall post API agents install API
*/
func (a *Client) PostAPIAgentsInstall(params *PostAPIAgentsInstallParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIAgentsInstallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIAgentsInstallParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIAgentsInstall",
		Method:             "POST",
		PathPattern:        "/api/Agents/install",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIAgentsInstallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIAgentsInstallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIAgentsInstall: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIAgentsRun post API agents run API
*/
func (a *Client) PostAPIAgentsRun(params *PostAPIAgentsRunParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIAgentsRunOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIAgentsRunParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIAgentsRun",
		Method:             "POST",
		PathPattern:        "/api/Agents/run",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIAgentsRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIAgentsRunOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIAgentsRun: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIAgentsStop post API agents stop API
*/
func (a *Client) PostAPIAgentsStop(params *PostAPIAgentsStopParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIAgentsStopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIAgentsStopParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIAgentsStop",
		Method:             "POST",
		PathPattern:        "/api/Agents/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIAgentsStopReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIAgentsStopOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIAgentsStop: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPIAgentsID put API agents ID API
*/
func (a *Client) PutAPIAgentsID(params *PutAPIAgentsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutAPIAgentsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIAgentsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPIAgentsID",
		Method:             "PUT",
		PathPattern:        "/api/Agents/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAPIAgentsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIAgentsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIAgentsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
