// Code generated by go-swagger; DO NOT EDIT.

package references

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new references API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for references API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPIReferencesID(params *DeleteAPIReferencesIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAPIReferencesIDOK, error)

	GetAPIReferences(params *GetAPIReferencesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIReferencesOK, error)

	GetAPIReferencesCategories(params *GetAPIReferencesCategoriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIReferencesCategoriesOK, error)

	PostAPIReferences(params *PostAPIReferencesParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIReferencesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAPIReferencesID delete API references ID API
*/
func (a *Client) DeleteAPIReferencesID(params *DeleteAPIReferencesIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAPIReferencesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIReferencesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIReferencesID",
		Method:             "DELETE",
		PathPattern:        "/api/References/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIReferencesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIReferencesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIReferencesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIReferences get API references API
*/
func (a *Client) GetAPIReferences(params *GetAPIReferencesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIReferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIReferencesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIReferences",
		Method:             "GET",
		PathPattern:        "/api/References",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIReferencesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIReferencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIReferences: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIReferencesCategories get API references categories API
*/
func (a *Client) GetAPIReferencesCategories(params *GetAPIReferencesCategoriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIReferencesCategoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIReferencesCategoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIReferencesCategories",
		Method:             "GET",
		PathPattern:        "/api/References/categories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIReferencesCategoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIReferencesCategoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIReferencesCategories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIReferences post API references API
*/
func (a *Client) PostAPIReferences(params *PostAPIReferencesParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIReferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIReferencesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIReferences",
		Method:             "POST",
		PathPattern:        "/api/References",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIReferencesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIReferencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIReferences: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
