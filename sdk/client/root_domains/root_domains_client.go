// Code generated by go-swagger; DO NOT EDIT.

package root_domains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new root domains API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for root domains API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPIRootDomainsDeleteSubdomiansTargetNameRootDomainName(params *DeleteAPIRootDomainsDeleteSubdomiansTargetNameRootDomainNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAPIRootDomainsDeleteSubdomiansTargetNameRootDomainNameOK, error)

	GetAPIRootDomainsTargetNameRootDomainName(params *GetAPIRootDomainsTargetNameRootDomainNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIRootDomainsTargetNameRootDomainNameOK, error)

	PostAPIRootDomainsExportSubdomainsTargetNameRootDomainName(params *PostAPIRootDomainsExportSubdomainsTargetNameRootDomainNameParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIRootDomainsExportSubdomainsTargetNameRootDomainNameOK, error)

	PostAPIRootDomainsExportTargetNameRootDomainName(params *PostAPIRootDomainsExportTargetNameRootDomainNameParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIRootDomainsExportTargetNameRootDomainNameOK, error)

	PostAPIRootDomainsUploadSubdomainsTargetNameRootDomainName(params *PostAPIRootDomainsUploadSubdomainsTargetNameRootDomainNameParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIRootDomainsUploadSubdomainsTargetNameRootDomainNameOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAPIRootDomainsDeleteSubdomiansTargetNameRootDomainName delete API root domains delete subdomians target name root domain name API
*/
func (a *Client) DeleteAPIRootDomainsDeleteSubdomiansTargetNameRootDomainName(params *DeleteAPIRootDomainsDeleteSubdomiansTargetNameRootDomainNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAPIRootDomainsDeleteSubdomiansTargetNameRootDomainNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIRootDomainsDeleteSubdomiansTargetNameRootDomainNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIRootDomainsDeleteSubdomiansTargetNameRootDomainName",
		Method:             "DELETE",
		PathPattern:        "/api/RootDomains/deleteSubdomians/{targetName}/{rootDomainName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIRootDomainsDeleteSubdomiansTargetNameRootDomainNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIRootDomainsDeleteSubdomiansTargetNameRootDomainNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIRootDomainsDeleteSubdomiansTargetNameRootDomainName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIRootDomainsTargetNameRootDomainName get API root domains target name root domain name API
*/
func (a *Client) GetAPIRootDomainsTargetNameRootDomainName(params *GetAPIRootDomainsTargetNameRootDomainNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIRootDomainsTargetNameRootDomainNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIRootDomainsTargetNameRootDomainNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIRootDomainsTargetNameRootDomainName",
		Method:             "GET",
		PathPattern:        "/api/RootDomains/{targetName}/{rootDomainName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIRootDomainsTargetNameRootDomainNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIRootDomainsTargetNameRootDomainNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIRootDomainsTargetNameRootDomainName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIRootDomainsExportSubdomainsTargetNameRootDomainName post API root domains export subdomains target name root domain name API
*/
func (a *Client) PostAPIRootDomainsExportSubdomainsTargetNameRootDomainName(params *PostAPIRootDomainsExportSubdomainsTargetNameRootDomainNameParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIRootDomainsExportSubdomainsTargetNameRootDomainNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIRootDomainsExportSubdomainsTargetNameRootDomainNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIRootDomainsExportSubdomainsTargetNameRootDomainName",
		Method:             "POST",
		PathPattern:        "/api/RootDomains/exportSubdomains/{targetName}/{rootDomainName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIRootDomainsExportSubdomainsTargetNameRootDomainNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIRootDomainsExportSubdomainsTargetNameRootDomainNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIRootDomainsExportSubdomainsTargetNameRootDomainName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIRootDomainsExportTargetNameRootDomainName post API root domains export target name root domain name API
*/
func (a *Client) PostAPIRootDomainsExportTargetNameRootDomainName(params *PostAPIRootDomainsExportTargetNameRootDomainNameParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIRootDomainsExportTargetNameRootDomainNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIRootDomainsExportTargetNameRootDomainNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIRootDomainsExportTargetNameRootDomainName",
		Method:             "POST",
		PathPattern:        "/api/RootDomains/export/{targetName}/{rootDomainName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIRootDomainsExportTargetNameRootDomainNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIRootDomainsExportTargetNameRootDomainNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIRootDomainsExportTargetNameRootDomainName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIRootDomainsUploadSubdomainsTargetNameRootDomainName post API root domains upload subdomains target name root domain name API
*/
func (a *Client) PostAPIRootDomainsUploadSubdomainsTargetNameRootDomainName(params *PostAPIRootDomainsUploadSubdomainsTargetNameRootDomainNameParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIRootDomainsUploadSubdomainsTargetNameRootDomainNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIRootDomainsUploadSubdomainsTargetNameRootDomainNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIRootDomainsUploadSubdomainsTargetNameRootDomainName",
		Method:             "POST",
		PathPattern:        "/api/RootDomains/uploadSubdomains/{targetName}/{rootDomainName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIRootDomainsUploadSubdomainsTargetNameRootDomainNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIRootDomainsUploadSubdomainsTargetNameRootDomainNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIRootDomainsUploadSubdomainsTargetNameRootDomainName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
